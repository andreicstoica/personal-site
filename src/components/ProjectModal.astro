---
import type { Project } from "../../lib/types";
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
import { ModalManager } from "../utils/modalAccessibility";

interface Props {
  project: Project;
}

const { project } = Astro.props;

// A map of all possible images, to avoid dynamic imports
const allImages = import.meta.glob<{ default: ImageMetadata }>(
  "src/assets/images/**/*.{jpeg,jpg,png,gif}"
);
---

<div
  class="project-modal fixed inset-0 z-50 hidden items-center justify-center p-4 bg-black bg-opacity-50 backdrop-blur-sm"
  data-project-id={project.id}
  role="dialog"
  aria-modal="true"
  aria-labelledby={`modal-title-${project.id}`}
  aria-describedby={`modal-description-${project.id}`}
>
  <div
    class="modal-content shadow-xl max-w-2xl w-full max-h-[80vh] overflow-y-auto"
    style="background: var(--color-bg-primary);"
  >
    <!-- Modal Header -->
    <div
      class="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700"
    >
      <h2
        id={`modal-title-${project.id}`}
        class="text-2xl font-bold text-gray-900 dark:text-white"
      >
        {project.title}
      </h2>
      <button
        class="modal-close w-6 h-6 flex items-center justify-center text-2xl font-bold cursor-pointer transition-colors"
        style="color: var(--tag-other); background: var(--tag-school);"
        aria-label="Close modal"
        type="button"
      >
        Ã—
      </button>
    </div>

    <!-- Modal Body -->
    <div class="p-4">
      <!-- Project Description -->
      <div id={`modal-description-${project.id}`} class="mb-6">
        <p class="text-gray-700 dark:text-gray-300 leading-relaxed">
          {project.description}
        </p>
      </div>

      <!-- Technologies -->
      <div class="mb-6">
        <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-3">
          Technologies
        </h3>
        <div class="flex flex-wrap gap-2">
          {
            project.technologies.map((tech) => (
              <span class="px-3 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-sm font-medium">
                {tech}
              </span>
            ))
          }
        </div>
      </div>

      <!-- Project Links -->
      {
        (project.links.demo ||
          project.links.github ||
          project.links.website) && (
          <div class="mb-6">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-3">
              Links
            </h3>
            <div class="flex flex-wrap gap-3">
              {project.links.demo && (
                <a
                  href={project.links.demo}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="btn-secondary-custom inline-flex items-center px-4 py-2 transition-colors"
                >
                  <svg
                    class="w-4 h-4 mr-2"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
                    />
                  </svg>
                  Live Demo
                </a>
              )}
              {project.links.github && (
                <a
                  href={project.links.github}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="btn-accent-custom inline-flex items-center px-4 py-2 transition-colors"
                >
                  <svg
                    class="w-4 h-4 mr-2"
                    fill="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
                  </svg>
                  GitHub
                </a>
              )}
              {project.links.website && (
                <a
                  href={project.links.website}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="btn-secondary-custom inline-flex items-center px-4 py-2 transition-colors"
                >
                  <svg
                    class="w-4 h-4 mr-2"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9"
                    />
                  </svg>
                  Website
                </a>
              )}
            </div>
          </div>
        )
      }

      <!-- Project Images -->
      {
        project.images && project.images.length > 0 && (
          <div class="mb-4">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-3">
              Screenshots
            </h3>
            <div class="flex gap-4 overflow-x-auto">
              {project.images.map(async (imageName, index) => {
                const imagePath = `/src/assets/images/${imageName}`;
                const isGif = imageName.toLowerCase().endsWith(".gif");

                const imageModule = allImages[imagePath];

                if (!imageModule) {
                  return (
                    <div class="flex-shrink-0 w-48 h-32 bg-gray-100 dark:bg-gray-700 p-4 text-center flex items-center justify-center">
                      <span class="text-gray-500 text-sm">
                        Image not found: {imageName}
                        <br />
                        Path: {imagePath}
                      </span>
                    </div>
                  );
                }

                const image = await imageModule();

                if (isGif) {
                  return (
                    <div class="flex-shrink-0">
                      <img
                        src={image.default.src}
                        alt={`${project.title} screenshot ${index + 1}`}
                        class="h-40 w-auto object-cover"
                        loading="lazy"
                        style="width: auto;"
                      />
                    </div>
                  );
                }

                return (
                  <div class="flex-shrink-0">
                    <Image
                      src={image.default}
                      alt={`${project.title} screenshot ${index + 1}`}
                      loading="lazy"
                      width={undefined}
                      class="h-40 w-auto object-cover"
                    />
                  </div>
                );
              })}
            </div>
          </div>
        )
      }
    </div>
  </div>
</div>

<script>
  document.addEventListener("click", function (e) {
    const target = e.target as HTMLElement | null;
    if (!target) return;
    const btn = target.closest(".modal-close");
    if (btn) {
      const modal = btn.closest(".project-modal");
      if (modal) {
        modal.classList.add("hidden");
        modal.classList.remove("flex");
        document.body.style.position = "";
        document.body.style.top = "";
        document.body.style.width = "";
        window.scrollTo(0, 0);
      }
    }
  });
</script>

<style>
  .project-modal {
    animation: fadeIn 0.2s ease-out;
  }

  .project-modal.closing {
    animation: fadeOut 0.2s ease-in;
  }

  .modal-content {
    animation: slideIn 0.2s ease-out;
    transform-origin: center;
  }

  .project-modal.closing .modal-content {
    animation: slideOut 0.2s ease-in;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes fadeOut {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: scale(0.9) translateY(-20px);
    }
    to {
      opacity: 1;
      transform: scale(1) translateY(0);
    }
  }

  @keyframes slideOut {
    from {
      opacity: 1;
      transform: scale(1) translateY(0);
    }
    to {
      opacity: 0;
      transform: scale(0.9) translateY(-20px);
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .project-modal,
    .modal-content {
      animation: none;
    }
  }

  /* Custom button styles using tag colors */
  .btn-secondary-custom {
    background: var(--tag-personal);
    color: var(--color-text-primary);
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .btn-secondary-custom:hover {
    background: var(--tag-personal);
    filter: brightness(0.9);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .btn-accent-custom {
    background: var(--tag-school);
    color: var(--color-text-primary);
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .btn-accent-custom:hover {
    background: var(--tag-school);
    filter: brightness(0.9);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  /* Close button styling to match MediaGallery */
  .modal-close:hover {
    color: var(--color-accent-hover);
  }

  /* Mobile responsive adjustments */
  @media (max-width: 768px) {
    .project-modal {
      display: flex !important;
      align-items: center !important;
      justify-content: center !important;
      z-index: 9999 !important;
      padding: 1rem !important;
      top: 0 !important;
      left: 0 !important;
      width: 100vw !important;
      height: 100vh !important;
    }
    .modal-content {
      width: 100vw !important;
      max-width: 100vw !important;
      max-height: 100vh !important;
      margin: 0 !important;
      border-radius: 0 !important;
      padding: 0 !important;
      overflow: auto !important;
    }

    /* Stack links vertically on mobile */
    .modal-content .flex.flex-wrap.gap-3 {
      flex-direction: column;
      gap: 0.75rem;
    }

    .modal-content .inline-flex {
      justify-content: center;
    }
  }

  @media (max-width: 480px) {
    .modal-content {
      margin: 0.5rem;
      max-height: calc(100vh - 1rem);
    }

    /* Smaller text on very small screens */
    .modal-content h2 {
      font-size: 1.25rem;
    }

    .modal-content h3 {
      font-size: 1rem;
    }

    /* Adjust padding on small screens */
    .modal-content .p-6 {
      padding: 1rem;
    }
  }
</style>
