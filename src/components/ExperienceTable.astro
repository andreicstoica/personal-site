---
import type { Experience } from "../../lib/types.ts";
import { experiences } from "../../lib/experience.ts";
import MediaGallery from "./MediaGallery.astro";

// Get unique types for the filter dropdown
const allTypes = [...new Set(experiences.map(exp => exp.type))].sort();

// Color mapping for different experience types using CSS custom properties
const typeColors = {
  personal: '--tag-personal',
  work: '--tag-work',
  school: '--tag-school',
  other: '--tag-other'
};

// Text color mapping for better contrast with each background, irrespective of theme
const textColors = {
  personal: '272727',    // Dark text on bright green
  work: 'fefefe',        // White text on blue
  school: '272727',      // Dark text on yellow
  other: 'fefefe'        // White text on pink
};

// Helper function to get inline styles for a given type
const getTypeStyles = (type: string) => {
  const colorVar = typeColors[type as keyof typeof typeColors] || '--tag-other';
  const textColorVar = textColors[type as keyof typeof textColors] || '272727';
  return `background-color: var(${colorVar}); color: #${textColorVar}; box-decoration-break: clone; -webkit-box-decoration-break: clone; font-size: 0.875rem; font-weight: 500; display: inline; padding: 0.2rem 0.2rem;`
};

// Format date range
const formatDateRange = (startDate: string, endDate?: string) => {
  if (endDate && endDate !== '...') {
    return `${startDate}-${endDate}`;
  }
  return endDate === '...' ? `${startDate}-...` : startDate;
};
---

<section class="w-full text-(color-text-primary) dark:text-(color-text-inverse)">
  <!-- Table Header -->
  <div class="hidden lg:grid lg:grid-cols-10 gap-2 pb-3 font-semibold text-sm uppercase tracking-wider">
    <div class="col-span-1 text-sm">Experience</div>
    <div class="col-span-2 text-sm">Role</div>
    <div class="col-span-2 text-sm">
      <select id="typeFilter" class="w-full border max-w-30 border-gray-300 dark:border-gray-600 px-2 text-sm bg-transparent uppercase">
        <option value="">all</option>
        {allTypes.map(type => (
          <option value={type}>{type}</option>
        ))}
      </select>
    </div>
    <div class="col-span-1 text-sm">Date</div>
    <div class="col-span-4 text-sm">Media</div>
  </div>

  <!-- Table Body -->
  <div class="space-y-4">
    {experiences.map((experience, index) => (
      <div class="experience-row border-t border-gray-200 dark:border-gray-700" data-type={experience.type}>
        <!-- Desktop Layout -->
        <div class="hidden lg:grid lg:grid-cols-10 gap-2 items-start">
          <!-- Experience Name (1 col) -->
          <div class="col-span-1 -mt-0.25">
            <span class="line-clamp-2" style={getTypeStyles(experience.type)}>
              {experience.name}
            </span>
          </div>

          <!-- Content area (5 cols: Role, Tags, Date, and Description) -->
          <div class="col-span-5">
            <!-- Top row: Role, Tags, Date -->
            <div class="grid grid-cols-5 gap-3 mb-2">
              <!-- Role (2 cols) -->
              <div class="col-span-2">
                <div class="text-[.92rem]">{experience.role}</div>
              </div>

              <!-- Tags (2 cols) -->
              <div class="col-span-2 -mt-0.25">
                <span class="font-serif text-sm bg-(--color-bg-secondary) p-0.75">
                  {experience.tags.join(', ')}
                </span>
              </div>

              <!-- Date (1 col) -->
              <div class="col-span-1">
                <div class="font-mono text-[.92rem]">
                  {formatDateRange(experience.startDate, experience.endDate)}
                </div>
              </div>
            </div>

            <!-- Description below -->
            {experience.description && (
              <div>
                <p class="text-sm leading-relaxed text-pretty pr-1.5">
                  {experience.description}
                </p>
              </div>
            )}
          </div>

          <!-- Media (4 cols) -->
          <MediaGallery
            images={experience.images}
            experienceName={experience.name}
            variant="desktop"
          />
        </div>

        <!-- Mobile Layout -->
        <div class="lg:hidden">
          <div class="flex items-start gap-4 mb-3">
            <!-- Experience Name -->
            <span style={getTypeStyles(experience.type)}>
              {experience.name}
            </span>

            <!-- Role -->
            <div class="text-sm flex-1 mt-1">
              {experience.role}
            </div>

            <!-- Date -->
            <div class="font-mono text-sm flex-shrink-0 mt-1">
              {formatDateRange(experience.startDate, experience.endDate)}
            </div>
          </div>

          {experience.description && (
            <p class="text-sm leading-relaxed mb-3">
              {experience.description}
            </p>
          )}

          <MediaGallery
            images={experience.images}
            experienceName={experience.name}
            variant="mobile"
          />
        </div>

      </div>
    ))}
  </div>
</section>

<script>
  // Filter functionality
  const filterSelect = document.getElementById('typeFilter') as HTMLSelectElement;
  const experienceRows = document.querySelectorAll('.experience-row');

  if (filterSelect) {
    filterSelect.addEventListener('change', (e) => {
      const selectedType = (e.target as HTMLSelectElement).value;

      experienceRows.forEach((row) => {
        const rowType = (row as HTMLElement).dataset.type;

        if (selectedType === '' || rowType === selectedType) {
          (row as HTMLElement).style.display = 'block';
        } else {
          (row as HTMLElement).style.display = 'none';
        }
      });
    });
  }
</script>
