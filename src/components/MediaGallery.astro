---
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
import ImageGalleryReact from "./ImageGalleryReact";

interface Props {
  images?: string[];
  experienceName: string;
  variant?: "desktop" | "mobile";
  basePath?: "experience-images" | "old-sites" | "fitness";
}

const { images, experienceName, variant = "desktop" } = Astro.props;

if (!images || images.length === 0) {
  return null;
}

// A map of all possible images, to avoid dynamic imports
const allImages = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/images/**/*.{jpeg,jpg,png,gif}"
);

// Process images with optimization
const processedImages = await Promise.all(
  images.map(async (imageName) => {
    const imagePath = `/src/assets/images/${imageName}`;
    const isGif = imageName.toLowerCase().endsWith(".gif");
    const imageModule = allImages[imagePath];

    if (!imageModule) return null;

    const image = await imageModule();

    // For GIFs, keep original but add loading optimization
    if (isGif) {
      return {
        src: image.default.src,
        alt: experienceName,
        isGif: true,
        width: (image.default as any).width,
        height: (image.default as any).height,
        loading: "lazy" as const,
      };
    }

    // For other images, use optimized versions
    return {
      src: image.default.src,
      alt: experienceName,
      isGif: false,
      width: (image.default as any).width,
      height: (image.default as any).height,
      loading: "lazy" as const,
    };
  })
);

// Narrow away nulls so the React island gets a precise type
const validImages: {
  src: string;
  alt: string;
  isGif: boolean;
  width?: number;
  height?: number;
}[] = processedImages.filter(
  (img): img is NonNullable<typeof img> => img !== null
);
---

<ImageGalleryReact
  client:load
  images={validImages}
  experienceName={experienceName}
  variant={variant}
/>

<style>
  .scrollbar-always-visible {
    /* Always show horizontal scrollbar */
    overflow-x: auto !important;
    overflow-y: hidden;
    scrollbar-width: thin;
    scrollbar-color: #9ca3af transparent;
    white-space: nowrap;
  }

  /* Webkit browsers (Chrome, Safari, etc.) */
  .scrollbar-always-visible::-webkit-scrollbar {
    height: 8px;
    display: block;
  }

  .scrollbar-always-visible::-webkit-scrollbar-track {
    background: transparent;
  }

  .scrollbar-always-visible::-webkit-scrollbar-thumb {
    background-color: #9ca3af;
    border-radius: 4px;
  }

  .scrollbar-always-visible::-webkit-scrollbar-thumb:hover {
    background-color: #6b7280;
  }

  /* Dark mode */
  .dark .scrollbar-always-visible::-webkit-scrollbar-thumb {
    background-color: #6b7280;
  }

  .dark .scrollbar-always-visible::-webkit-scrollbar-thumb:hover {
    background-color: #9ca3af;
  }
</style>
