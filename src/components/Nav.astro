---
import { Image } from "astro:assets";
import chat from "../assets/images/chat.png";
import code from "../assets/images/code.png";
import linkedin from "../assets/images/linkedin.png";
import pen from "../assets/images/pen.png";
import bulb from "../assets/images/bulb.png";
import colophon from "../assets/images/colophon.png";
import hike from "../assets/images/hike.png";
---

<nav
  class="bg-linear-to-t to-blue-600 from-(--color-bg-primary) h-screen lg:h-screen lg:flex lg:flex-col lg:justify-start lg:p-6 md:h-auto md:p-4 lg:relative lg:pl-2"
>
  <!-- Name header -->
  <div
    class="text-(--color-text-inverse) text-2xl font-black mb-4 lg:mb-12 lg:z-10 ml-4"
  >
    Andrei Stoica
  </div>

  <!-- Icons container -->
  <div id="icons-container" class="flex space-x-4 items-center ml-4">
    <a
      href="https://github.com/andreicstoica/"
      class="icon-link"
      data-tooltip="GitHub"
      target="_blank"
    >
      <Image src={code} alt="GitHub" class="icon" />
    </a>
    <a href="/canon" class="icon-link" data-tooltip="Canon">
      <Image src={bulb} alt="Canon" class="icon" />
    </a>
    <a
      href="https://www.linkedin.com/in/andrei-c-stoica/"
      class="icon-link"
      data-tooltip="LinkedIn"
      target="_blank"
    >
      <Image src={linkedin} alt="LinkedIn" class="icon" />
    </a>
    <a
      href="https://andreisthoughts.substack.com/"
      class="icon-link"
      data-tooltip="Blog"
      target="_blank"
    >
      <Image src={pen} alt="Blog" class="icon" />
    </a>
    <a
      href="https://x.com/andreistoica_"
      class="icon-link"
      data-tooltip="X"
      target="_blank"
    >
      <Image src={chat} alt="X" class="icon" />
    </a>
    <a href="/colophon" class="icon-link" data-tooltip="Colophon">
      <Image src={colophon} alt="Colophon" class="icon" />
    </a>
    <a href="/fitness" class="icon-link" data-tooltip="Fitness">
      <Image src={hike} alt="Fitness" class="icon" />
    </a>
  </div>

  <style>
    .icon {
      width: 32px;
      height: 32px;
    }

    /* For smaller screens */
    @media (max-width: 768px) {
      .icon {
        width: 24px;
        height: 24px;
      }
    }

    .icon-link:hover .icon {
      opacity: 1;
    }

    /* Custom tooltip styles */
    .icon-link::after {
      content: attr(data-tooltip);
      position: absolute;
      bottom: -30px;
      left: 50%;
      transform: translateX(-50%);
      background: rgba(0, 0, 0, 0.8);
      color: white;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 12px;
      white-space: nowrap;
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.2s;
      z-index: 20;
    }

    .icon-link:hover::after {
      opacity: 1;
    }

    /* Large screen random positioning */
    @media (min-width: 1024px) {
      .icon-link {
        position: absolute;
        transition: all 0.3s ease;
      }

      #icons-container {
        position: absolute;
        inset: 0;
        top: 5rem;
      }
    }

    /* Mobile/tablet styles - ensure normal flow */
    @media (max-width: 1023px) {
      nav {
        height: auto !important;
        display: flex;
        flex-direction: column;
        padding: 1rem;
        position: relative;
      }

      .icon-link {
        position: static !important;
        left: auto !important;
        top: auto !important;
      }

      #icons-container {
        display: flex !important;
        flex-direction: row;
        gap: 1rem;
        position: static !important;
        inset: auto !important;
        top: auto !important;
      }

      .icon-link::after {
        display: none; /* Hide tooltips on mobile */
      }
    }
  </style>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const container = document.getElementById("icons-container");
      // Only run random positioning on large screens
      if (container && window.innerWidth >= 1024) {
        const icons = Array.from(container.children) as HTMLElement[];
        const nav = container.closest("nav")!;

        // Get container dimensions (subtract padding and header space)
        const containerHeight = nav.clientHeight - 120;
        const containerWidth = nav.clientWidth - 80;
        const iconSize = 32;
        const minDistance = 60;

        const placedPositions: { x: number; y: number }[] = [];

        const isTooClose = (x: number, y: number) => {
          return placedPositions.some((pos) => {
            const distance = Math.sqrt(
              Math.pow(x - pos.x, 2) + Math.pow(y - pos.y, 2)
            );
            return distance < minDistance;
          });
        };

        icons.forEach((icon, i) => {
          // Divide the container into N vertical bands
          const bandHeight = containerHeight / icons.length;
          const yMin = i * bandHeight;
          const yMax = (i + 1) * bandHeight - iconSize;

          let attempts = 0;
          const maxAttempts = 100;
          let position;

          while (attempts < maxAttempts) {
            const x = Math.random() * (containerWidth - iconSize);
            const y = yMin + Math.random() * Math.max(0, yMax - yMin);
            if (!isTooClose(x + iconSize / 2, y + iconSize / 2)) {
              position = { x, y };
              break;
            }
            attempts++;
          }
          // fallback if no valid position found
          if (!position) {
            const x = Math.random() * (containerWidth - iconSize);
            const y = yMin + Math.random() * Math.max(0, yMax - yMin);
            position = { x, y };
          }

          icon.style.left = `${position.x}px`;
          icon.style.top = `${position.y}px`;

          placedPositions.push({
            x: position.x + iconSize / 2,
            y: position.y + iconSize / 2,
          });
        });
      }
    });
  </script>
</nav>
